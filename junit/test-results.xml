<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="0" hostname="fv-az105" name="pytest" skipped="0" tests="185" time="27.563" timestamp="2020-02-25T20:11:48.942661"><testcase classname="zdevelop.tests.test_api.TestInit" file="zdevelop/tests/test_api.py" line="73" name="test_route_type_error" time="0.003"></testcase><testcase classname="zdevelop.tests.test_api.TestBasicDecoding" file="zdevelop/tests/test_api.py" line="82" name="test_mimetype_known" time="0.020"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestBasicDecoding" file="zdevelop/tests/test_api.py" line="95" name="test_mimetype_unknown" time="0.016"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestBasicDecoding" file="zdevelop/tests/test_api.py" line="108" name="test_no_media" time="0.016"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestBasicDecoding" file="zdevelop/tests/test_api.py" line="119" name="test_decode_error" time="0.018"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Media could not be decoded.&quot;,
    &quot;error-id&quot;: &quot;87bb6e79-0a9a-4dce-9a8c-f0917d358731&quot;,
    &quot;error-code&quot;: &quot;1003&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (87bb6e79-0a9a-4dce-9a8c-f0917d358731) - RequestValidationError &quot;Media could not be decoded.&quot;
Traceback (most recent call last):
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 46, in _load_content_by_mimetype
    return deserializer(content)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_encoders.py&quot;, line 65, in json_decode
    loaded = rapidjson.loads(content)
rapidjson.JSONDecodeError: Parse error at offset 1: Invalid value.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 93, in decode_content
    content_mimetype = _load_content_by_mimetype(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 48, in _load_content_by_mimetype
    raise ContentDecodeError(f&quot;Error occurred while decoding content as {mimetype}&quot;)
spantools._errors.ContentDecodeError: Error occurred while decoding content as MimeType.JSON

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 124, in on_post
    media = await req.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 160, in media
    raise RequestValidationError(&quot;Media could not be decoded.&quot;)
spantools.errors_api._classes.RequestValidationError: Media could not be decoded.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestBasicDecoding" file="zdevelop/tests/test_api.py" line="134" name="test_decode_media_loaded" time="0.016"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestBasicDecoding" file="zdevelop/tests/test_api.py" line="150" name="test_register_mimetype_encoders" time="0.016"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;text/csv&quot;,
    &quot;content-length&quot;: &quot;21&quot;
}

CONTENT:
b&apos;key\r\nvalue1\r\nvalue2\r\n&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestErrorHandling" file="zdevelop/tests/test_api.py" line="192" name="test_basic_error" time="0.017"><system-out>RESPONSE: &lt;Response [403]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;TestCustomError&quot;,
    &quot;error-message&quot;: &quot;Custom Message&quot;,
    &quot;error-id&quot;: &quot;30fa4521-582c-4853-8910-d90eaf536faf&quot;,
    &quot;error-code&quot;: &quot;9999&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (30fa4521-582c-4853-8910-d90eaf536faf) - TestCustomError &quot;Custom Message&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 201, in on_get
    raise TestCustomError(&quot;Custom Message&quot;)
test_api.TestErrorHandling.test_basic_error.&lt;locals&gt;.TestCustomError: Custom Message
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestErrorHandling" file="zdevelop/tests/test_api.py" line="206" name="test_unknown_error" time="0.017"><system-out>RESPONSE: &lt;Response [501]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;APIError&quot;,
    &quot;error-message&quot;: &quot;An unknown error occurred.&quot;,
    &quot;error-id&quot;: &quot;147701e8-c6f9-44ab-8ed8-fb4c952e3fdb&quot;,
    &quot;error-code&quot;: &quot;1000&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (147701e8-c6f9-44ab-8ed8-fb4c952e3fdb) - APIError &quot;An unknown error occurred.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 211, in on_get
    raise ValueError(&quot;Some Error&quot;)
ValueError: Some Error
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestErrorHandling" file="zdevelop/tests/test_api.py" line="216" name="test_invalid_method_error" time="0.016"><system-out>RESPONSE: &lt;Response [405]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;InvalidMethodError&quot;,
    &quot;error-message&quot;: &quot;&apos;http://;/error&apos; does not support POST&quot;,
    &quot;error-id&quot;: &quot;53b425e4-c645-4d34-9920-0c45e73ad41c&quot;,
    &quot;error-code&quot;: &quot;1001&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (53b425e4-c645-4d34-9920-0c45e73ad41c) - InvalidMethodError &quot;&apos;http://;/error&apos; does not support POST&quot;
NoneType: None
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestErrorHandling" file="zdevelop/tests/test_api.py" line="226" name="test_route_type_data_error" time="0.031"><system-out>RESPONSE: &lt;Response [501]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;APIError&quot;,
    &quot;error-message&quot;: &quot;An unknown error occurred.&quot;,
    &quot;error-id&quot;: &quot;e473d2ea-3266-48f4-8ba1-dd27f3169bc2&quot;,
    &quot;error-code&quot;: &quot;1000&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (e473d2ea-3266-48f4-8ba1-dd27f3169bc2) - APIError &quot;An unknown error occurred.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 232, in on_get
    raise TypeError(&quot;Some Error&quot;)
TypeError: Some Error
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestErrorHandling" file="zdevelop/tests/test_api.py" line="237" name="test_nothing_to_return_error" time="0.019"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;NothingToReturnError&quot;,
    &quot;error-message&quot;: &quot;No Data to Return&quot;,
    &quot;error-id&quot;: &quot;7d4a405c-e6b9-467e-8cf6-666b00835831&quot;,
    &quot;error-code&quot;: &quot;1002&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (7d4a405c-e6b9-467e-8cf6-666b00835831) - NothingToReturnError &quot;No Data to Return&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 70, in wrapper
    resp._dump_media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 274, in _dump_media
    content, schema, validate = self._resp_calculate_dump_settings()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 336, in _resp_calculate_dump_settings
    raise NothingToReturnError(&quot;No Data to Return&quot;)
spantools.errors_api._classes.NothingToReturnError: No Data to Return
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestErrorHandling" file="zdevelop/tests/test_api.py" line="248" name="test_nothing_to_return_error_passed[None]" time="0.020"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;NothingToReturnError&quot;,
    &quot;error-message&quot;: &quot;No Data to Return&quot;,
    &quot;error-id&quot;: &quot;8ec99e0b-c895-44a0-ade5-b4c2683856ac&quot;,
    &quot;error-code&quot;: &quot;1002&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (8ec99e0b-c895-44a0-ade5-b4c2683856ac) - NothingToReturnError &quot;No Data to Return&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 70, in wrapper
    resp._dump_media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 274, in _dump_media
    content, schema, validate = self._resp_calculate_dump_settings()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 336, in _resp_calculate_dump_settings
    raise NothingToReturnError(&quot;No Data to Return&quot;)
spantools.errors_api._classes.NothingToReturnError: No Data to Return
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestErrorHandling" file="zdevelop/tests/test_api.py" line="248" name="test_nothing_to_return_error_passed[sent_value1]" time="0.018"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;NothingToReturnError&quot;,
    &quot;error-message&quot;: &quot;No Data to Return&quot;,
    &quot;error-id&quot;: &quot;beb9d344-94a6-4c5f-9712-9cab16fa297a&quot;,
    &quot;error-code&quot;: &quot;1002&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (beb9d344-94a6-4c5f-9712-9cab16fa297a) - NothingToReturnError &quot;No Data to Return&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 70, in wrapper
    resp._dump_media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 274, in _dump_media
    content, schema, validate = self._resp_calculate_dump_settings()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 336, in _resp_calculate_dump_settings
    raise NothingToReturnError(&quot;No Data to Return&quot;)
spantools.errors_api._classes.NothingToReturnError: No Data to Return
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestErrorHandling" file="zdevelop/tests/test_api.py" line="248" name="test_nothing_to_return_error_passed[sent_value2]" time="0.033"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;NothingToReturnError&quot;,
    &quot;error-message&quot;: &quot;No Data to Return&quot;,
    &quot;error-id&quot;: &quot;fa37fb2c-d828-4d01-9f0e-f562b85aab23&quot;,
    &quot;error-code&quot;: &quot;1002&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (fa37fb2c-d828-4d01-9f0e-f562b85aab23) - NothingToReturnError &quot;No Data to Return&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 70, in wrapper
    resp._dump_media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 274, in _dump_media
    content, schema, validate = self._resp_calculate_dump_settings()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 336, in _resp_calculate_dump_settings
    raise NothingToReturnError(&quot;No Data to Return&quot;)
spantools.errors_api._classes.NothingToReturnError: No Data to Return
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestErrorHandling" file="zdevelop/tests/test_api.py" line="260" name="test_send_data_with_error" time="0.019"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;CustomError&quot;,
    &quot;error-message&quot;: &quot;Some Custom Error&quot;,
    &quot;error-id&quot;: &quot;be2c5fca-4b89-4599-9ee1-f9fc581570f8&quot;,
    &quot;error-code&quot;: &quot;1100&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;32&quot;
}

JSON:
{
    &quot;last&quot;: &quot;Peake&quot;,
    &quot;first&quot;: &quot;Billy&quot;
}
</system-out><system-err>ERROR: (be2c5fca-4b89-4599-9ee1-f9fc581570f8) - CustomError &quot;Some Custom Error&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 271, in on_get
    raise CustomError(&quot;Some Custom Error&quot;, send_media=True)
test_api.TestErrorHandling.test_send_data_with_error.&lt;locals&gt;.CustomError: Some Custom Error
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestErrorHandling" file="zdevelop/tests/test_api.py" line="278" name="test_send_data_with_error_fails_dump" time="0.017"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;CustomError&quot;,
    &quot;error-message&quot;: &quot;Some Custom Error&quot;,
    &quot;error-id&quot;: &quot;5b7fc184-f06b-4a8a-be1c-9cbbae28f65e&quot;,
    &quot;error-code&quot;: &quot;1100&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (5b7fc184-f06b-4a8a-be1c-9cbbae28f65e) - CustomError &quot;Some Custom Error&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 288, in on_get
    raise CustomError(&quot;Some Custom Error&quot;, send_media=True)
test_api.TestErrorHandling.test_send_data_with_error_fails_dump.&lt;locals&gt;.CustomError: Some Custom Error
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[True-LoadOptions.VALIDATE_AND_LOAD-data_post0-data_passed0-None]" time="0.020"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[True-LoadOptions.VALIDATE_AND_LOAD-data_post1-None-RequestValidationError]" time="0.021"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Request data does not match schema.&quot;,
    &quot;error-id&quot;: &quot;c23c3d4c-62dc-41fb-9310-1fbce524a583&quot;,
    &quot;error-code&quot;: &quot;1003&quot;,
    &quot;error-data&quot;: &quot;{\&quot;id\&quot;: [\&quot;Not a valid UUID.\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (c23c3d4c-62dc-41fb-9310-1fbce524a583) - RequestValidationError &quot;Request data does not match schema.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 99, in decode_content
    content_loaded = data_schema.load(content_mimetype)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/grahamcracker/_schema_classes.py&quot;, line 115, in load
    return super().load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 722, in load
    return self._do_load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 904, in _do_load
    raise exc
marshmallow.exceptions.ValidationError: {&apos;id&apos;: [&apos;Not a valid UUID.&apos;]}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 374, in on_post
    data = await req.media_loaded()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 174, in media_loaded
    await self.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 156, in media
    raise RequestValidationError(
spantools.errors_api._classes.RequestValidationError: Request data does not match schema.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[True-LoadOptions.VALIDATE_AND_LOAD-data_post2-None-RequestValidationError]" time="0.019"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Request data does not match schema.&quot;,
    &quot;error-id&quot;: &quot;b7af8cbf-78e2-4a2f-ab8d-9d4154e58931&quot;,
    &quot;error-code&quot;: &quot;1003&quot;,
    &quot;error-data&quot;: &quot;{\&quot;last\&quot;: [\&quot;Malfoys are not allowed\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (b7af8cbf-78e2-4a2f-ab8d-9d4154e58931) - RequestValidationError &quot;Request data does not match schema.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 99, in decode_content
    content_loaded = data_schema.load(content_mimetype)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/grahamcracker/_schema_classes.py&quot;, line 115, in load
    return super().load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 722, in load
    return self._do_load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 904, in _do_load
    raise exc
marshmallow.exceptions.ValidationError: {&apos;last&apos;: [&apos;Malfoys are not allowed&apos;]}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 374, in on_post
    data = await req.media_loaded()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 174, in media_loaded
    await self.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 156, in media
    raise RequestValidationError(
spantools.errors_api._classes.RequestValidationError: Request data does not match schema.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[True-LoadOptions.VALIDATE_AND_LOAD-notajson-None-RequestValidationError]" time="0.020"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Media could not be decoded.&quot;,
    &quot;error-id&quot;: &quot;e23e1616-ba2b-4a14-9b80-1a5ae08b6680&quot;,
    &quot;error-code&quot;: &quot;1003&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (e23e1616-ba2b-4a14-9b80-1a5ae08b6680) - RequestValidationError &quot;Media could not be decoded.&quot;
Traceback (most recent call last):
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 46, in _load_content_by_mimetype
    return deserializer(content)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_encoders.py&quot;, line 176, in bson_decode
    return RawBSONDocument(content)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/bson/raw_bson.py&quot;, line 82, in __init__
    _get_object_size(bson_bytes, 0, len(bson_bytes))
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/bson/__init__.py&quot;, line 228, in _get_object_size
    if data[end] != _OBJEND:
IndexError: index out of range

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 93, in decode_content
    content_mimetype = _load_content_by_mimetype(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 48, in _load_content_by_mimetype
    raise ContentDecodeError(f&quot;Error occurred while decoding content as {mimetype}&quot;)
spantools._errors.ContentDecodeError: Error occurred while decoding content as MimeType.BSON

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 374, in on_post
    data = await req.media_loaded()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 174, in media_loaded
    await self.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 160, in media
    raise RequestValidationError(&quot;Media could not be decoded.&quot;)
spantools.errors_api._classes.RequestValidationError: Media could not be decoded.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[True-LoadOptions.VALIDATE_ONLY-data_post4-data_passed4-None]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[True-LoadOptions.VALIDATE_ONLY-data_post5-None-RequestValidationError]" time="0.020"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Request data does not match schema.&quot;,
    &quot;error-id&quot;: &quot;0febadd7-b1f6-4704-ae68-36d458bb6f71&quot;,
    &quot;error-code&quot;: &quot;1003&quot;,
    &quot;error-data&quot;: &quot;{\&quot;id\&quot;: [\&quot;Not a valid UUID.\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (0febadd7-b1f6-4704-ae68-36d458bb6f71) - RequestValidationError &quot;Request data does not match schema.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 99, in decode_content
    content_loaded = data_schema.load(content_mimetype)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/grahamcracker/_schema_classes.py&quot;, line 115, in load
    return super().load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 722, in load
    return self._do_load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 904, in _do_load
    raise exc
marshmallow.exceptions.ValidationError: {&apos;id&apos;: [&apos;Not a valid UUID.&apos;]}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 374, in on_post
    data = await req.media_loaded()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 174, in media_loaded
    await self.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 156, in media
    raise RequestValidationError(
spantools.errors_api._classes.RequestValidationError: Request data does not match schema.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[True-LoadOptions.VALIDATE_ONLY-data_post6-None-RequestValidationError]" time="0.023"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Request data does not match schema.&quot;,
    &quot;error-id&quot;: &quot;ed470a88-f77a-49e0-99b2-0871adc15903&quot;,
    &quot;error-code&quot;: &quot;1003&quot;,
    &quot;error-data&quot;: &quot;{\&quot;last\&quot;: [\&quot;Malfoys are not allowed\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (ed470a88-f77a-49e0-99b2-0871adc15903) - RequestValidationError &quot;Request data does not match schema.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 99, in decode_content
    content_loaded = data_schema.load(content_mimetype)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/grahamcracker/_schema_classes.py&quot;, line 115, in load
    return super().load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 722, in load
    return self._do_load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 904, in _do_load
    raise exc
marshmallow.exceptions.ValidationError: {&apos;last&apos;: [&apos;Malfoys are not allowed&apos;]}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 374, in on_post
    data = await req.media_loaded()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 174, in media_loaded
    await self.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 156, in media
    raise RequestValidationError(
spantools.errors_api._classes.RequestValidationError: Request data does not match schema.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[True-LoadOptions.VALIDATE_ONLY-notajson-None-RequestValidationError]" time="0.020"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Media could not be decoded.&quot;,
    &quot;error-id&quot;: &quot;e9bcd48d-847a-40fa-9dc6-d118fa7a608c&quot;,
    &quot;error-code&quot;: &quot;1003&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (e9bcd48d-847a-40fa-9dc6-d118fa7a608c) - RequestValidationError &quot;Media could not be decoded.&quot;
Traceback (most recent call last):
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 46, in _load_content_by_mimetype
    return deserializer(content)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_encoders.py&quot;, line 176, in bson_decode
    return RawBSONDocument(content)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/bson/raw_bson.py&quot;, line 82, in __init__
    _get_object_size(bson_bytes, 0, len(bson_bytes))
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/bson/__init__.py&quot;, line 228, in _get_object_size
    if data[end] != _OBJEND:
IndexError: index out of range

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 93, in decode_content
    content_mimetype = _load_content_by_mimetype(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 48, in _load_content_by_mimetype
    raise ContentDecodeError(f&quot;Error occurred while decoding content as {mimetype}&quot;)
spantools._errors.ContentDecodeError: Error occurred while decoding content as MimeType.BSON

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 374, in on_post
    data = await req.media_loaded()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 174, in media_loaded
    await self.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 160, in media
    raise RequestValidationError(&quot;Media could not be decoded.&quot;)
spantools.errors_api._classes.RequestValidationError: Media could not be decoded.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[True-LoadOptions.IGNORE-data_post8-data_passed8-None]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[True-LoadOptions.IGNORE-data_post9-data_passed9-None]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[True-LoadOptions.IGNORE-data_post10-data_passed10-None]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[False-LoadOptions.VALIDATE_AND_LOAD-data_post0-data_passed0-None]" time="0.023"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[False-LoadOptions.VALIDATE_AND_LOAD-data_post1-None-RequestValidationError]" time="0.022"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Request data does not match schema.&quot;,
    &quot;error-id&quot;: &quot;2117dbc8-6610-4c99-8232-2e4455969ee4&quot;,
    &quot;error-code&quot;: &quot;1003&quot;,
    &quot;error-data&quot;: &quot;{\&quot;id\&quot;: [\&quot;Not a valid UUID.\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (2117dbc8-6610-4c99-8232-2e4455969ee4) - RequestValidationError &quot;Request data does not match schema.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 99, in decode_content
    content_loaded = data_schema.load(content_mimetype)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/grahamcracker/_schema_classes.py&quot;, line 115, in load
    return super().load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 722, in load
    return self._do_load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 904, in _do_load
    raise exc
marshmallow.exceptions.ValidationError: {&apos;id&apos;: [&apos;Not a valid UUID.&apos;]}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 374, in on_post
    data = await req.media_loaded()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 174, in media_loaded
    await self.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 156, in media
    raise RequestValidationError(
spantools.errors_api._classes.RequestValidationError: Request data does not match schema.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[False-LoadOptions.VALIDATE_AND_LOAD-data_post2-None-RequestValidationError]" time="0.024"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Request data does not match schema.&quot;,
    &quot;error-id&quot;: &quot;5e16e598-ea23-43ae-b01a-bad4a6a2a950&quot;,
    &quot;error-code&quot;: &quot;1003&quot;,
    &quot;error-data&quot;: &quot;{\&quot;last\&quot;: [\&quot;Malfoys are not allowed\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (5e16e598-ea23-43ae-b01a-bad4a6a2a950) - RequestValidationError &quot;Request data does not match schema.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 99, in decode_content
    content_loaded = data_schema.load(content_mimetype)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/grahamcracker/_schema_classes.py&quot;, line 115, in load
    return super().load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 722, in load
    return self._do_load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 904, in _do_load
    raise exc
marshmallow.exceptions.ValidationError: {&apos;last&apos;: [&apos;Malfoys are not allowed&apos;]}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 374, in on_post
    data = await req.media_loaded()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 174, in media_loaded
    await self.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 156, in media
    raise RequestValidationError(
spantools.errors_api._classes.RequestValidationError: Request data does not match schema.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[False-LoadOptions.VALIDATE_AND_LOAD-notajson-None-RequestValidationError]" time="0.021"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Media could not be decoded.&quot;,
    &quot;error-id&quot;: &quot;9c4843a1-eb66-4036-82ef-a9215366b4f3&quot;,
    &quot;error-code&quot;: &quot;1003&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (9c4843a1-eb66-4036-82ef-a9215366b4f3) - RequestValidationError &quot;Media could not be decoded.&quot;
Traceback (most recent call last):
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 46, in _load_content_by_mimetype
    return deserializer(content)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_encoders.py&quot;, line 67, in json_decode
    raise ValueError(&quot;json did not decode to list or object&quot;)
ValueError: json did not decode to list or object

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 93, in decode_content
    content_mimetype = _load_content_by_mimetype(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 48, in _load_content_by_mimetype
    raise ContentDecodeError(f&quot;Error occurred while decoding content as {mimetype}&quot;)
spantools._errors.ContentDecodeError: Error occurred while decoding content as MimeType.JSON

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 374, in on_post
    data = await req.media_loaded()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 174, in media_loaded
    await self.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 160, in media
    raise RequestValidationError(&quot;Media could not be decoded.&quot;)
spantools.errors_api._classes.RequestValidationError: Media could not be decoded.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[False-LoadOptions.VALIDATE_ONLY-data_post4-data_passed4-None]" time="0.021"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[False-LoadOptions.VALIDATE_ONLY-data_post5-None-RequestValidationError]" time="0.020"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Request data does not match schema.&quot;,
    &quot;error-id&quot;: &quot;831824b5-468c-45d8-bf84-8e12a516750b&quot;,
    &quot;error-code&quot;: &quot;1003&quot;,
    &quot;error-data&quot;: &quot;{\&quot;id\&quot;: [\&quot;Not a valid UUID.\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (831824b5-468c-45d8-bf84-8e12a516750b) - RequestValidationError &quot;Request data does not match schema.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 99, in decode_content
    content_loaded = data_schema.load(content_mimetype)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/grahamcracker/_schema_classes.py&quot;, line 115, in load
    return super().load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 722, in load
    return self._do_load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 904, in _do_load
    raise exc
marshmallow.exceptions.ValidationError: {&apos;id&apos;: [&apos;Not a valid UUID.&apos;]}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 374, in on_post
    data = await req.media_loaded()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 174, in media_loaded
    await self.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 156, in media
    raise RequestValidationError(
spantools.errors_api._classes.RequestValidationError: Request data does not match schema.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[False-LoadOptions.VALIDATE_ONLY-data_post6-None-RequestValidationError]" time="0.020"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Request data does not match schema.&quot;,
    &quot;error-id&quot;: &quot;aa109725-e539-4744-93a7-3326a98738b4&quot;,
    &quot;error-code&quot;: &quot;1003&quot;,
    &quot;error-data&quot;: &quot;{\&quot;last\&quot;: [\&quot;Malfoys are not allowed\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (aa109725-e539-4744-93a7-3326a98738b4) - RequestValidationError &quot;Request data does not match schema.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 99, in decode_content
    content_loaded = data_schema.load(content_mimetype)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/grahamcracker/_schema_classes.py&quot;, line 115, in load
    return super().load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 722, in load
    return self._do_load(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/marshmallow/schema.py&quot;, line 904, in _do_load
    raise exc
marshmallow.exceptions.ValidationError: {&apos;last&apos;: [&apos;Malfoys are not allowed&apos;]}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 374, in on_post
    data = await req.media_loaded()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 174, in media_loaded
    await self.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 156, in media
    raise RequestValidationError(
spantools.errors_api._classes.RequestValidationError: Request data does not match schema.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[False-LoadOptions.VALIDATE_ONLY-notajson-None-RequestValidationError]" time="0.019"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Media could not be decoded.&quot;,
    &quot;error-id&quot;: &quot;f89d015f-96fd-428e-99dc-45c1d73aa7e9&quot;,
    &quot;error-code&quot;: &quot;1003&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (f89d015f-96fd-428e-99dc-45c1d73aa7e9) - RequestValidationError &quot;Media could not be decoded.&quot;
Traceback (most recent call last):
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 46, in _load_content_by_mimetype
    return deserializer(content)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_encoders.py&quot;, line 67, in json_decode
    raise ValueError(&quot;json did not decode to list or object&quot;)
ValueError: json did not decode to list or object

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 93, in decode_content
    content_mimetype = _load_content_by_mimetype(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 48, in _load_content_by_mimetype
    raise ContentDecodeError(f&quot;Error occurred while decoding content as {mimetype}&quot;)
spantools._errors.ContentDecodeError: Error occurred while decoding content as MimeType.JSON

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 374, in on_post
    data = await req.media_loaded()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 174, in media_loaded
    await self.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 160, in media
    raise RequestValidationError(&quot;Media could not be decoded.&quot;)
spantools.errors_api._classes.RequestValidationError: Media could not be decoded.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[False-LoadOptions.IGNORE-data_post8-data_passed8-None]" time="0.022"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[False-LoadOptions.IGNORE-data_post9-data_passed9-None]" time="0.020"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="297" name="test_req_load_schema[False-LoadOptions.IGNORE-data_post10-data_passed10-None]" time="0.021"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="399" name="test_req_load_schema_class" time="0.022"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="410" name="test_req_load_bson_list[data0]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="410" name="test_req_load_bson_list[data1]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="432" name="test_req_schema_class_marshmallow" time="0.021"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="450" name="test_req_load_text" time="0.018"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaReq" file="zdevelop/tests/test_api.py" line="461" name="test_error_not_a_json" time="0.019"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Media could not be decoded.&quot;,
    &quot;error-id&quot;: &quot;c7b11ead-2fc4-4b2c-aabc-7e7bc07fe4fb&quot;,
    &quot;error-code&quot;: &quot;1003&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (c7b11ead-2fc4-4b2c-aabc-7e7bc07fe4fb) - RequestValidationError &quot;Media could not be decoded.&quot;
Traceback (most recent call last):
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 46, in _load_content_by_mimetype
    return deserializer(content)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_encoders.py&quot;, line 65, in json_decode
    loaded = rapidjson.loads(content)
rapidjson.JSONDecodeError: Parse error at offset 0: The document is empty.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 148, in media
    loaded, mimetype_decoded = decode_content(  # type: ignore
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 93, in decode_content
    content_mimetype = _load_content_by_mimetype(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_load.py&quot;, line 48, in _load_content_by_mimetype
    raise ContentDecodeError(f&quot;Error occurred while decoding content as {mimetype}&quot;)
spantools._errors.ContentDecodeError: Error occurred while decoding content as MimeType.JSON

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 318, in wrapper
    await route_method(route, http_req, http_resp, **kwargs)
  File &quot;/home/vsts/work/1/s/zdevelop/tests/test_api.py&quot;, line 467, in on_post
    await req.media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 160, in media
    raise RequestValidationError(&quot;Media could not be decoded.&quot;)
spantools.errors_api._classes.RequestValidationError: Media could not be decoded.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[False-DumpOptions.DUMP_ONLY-data_send0-data_returned0-None]" time="0.023"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;77&quot;
}

JSON:
{
    &quot;last&quot;: &quot;Potter&quot;,
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;,
    &quot;first&quot;: &quot;Harry&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[False-DumpOptions.DUMP_ONLY-data_send1-data_returned1-None]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;77&quot;
}

JSON:
{
    &quot;last&quot;: &quot;Malfoy&quot;,
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;,
    &quot;first&quot;: &quot;Draco&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[False-DumpOptions.DUMP_ONLY-data_send2-data_returned2-None]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;46&quot;
}

JSON:
{
    &quot;last&quot;: &quot;Potter&quot;,
    &quot;id&quot;: &quot;badid&quot;,
    &quot;first&quot;: &quot;Harry&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[False-DumpOptions.DUMP_AND_VALIDATE-data_send3-data_returned3-None]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;77&quot;
}

JSON:
{
    &quot;last&quot;: &quot;Potter&quot;,
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;,
    &quot;first&quot;: &quot;Harry&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[False-DumpOptions.DUMP_AND_VALIDATE-data_send4-None-ResponseValidationError]" time="0.020"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;error-name&quot;: &quot;ResponseValidationError&quot;,
    &quot;error-message&quot;: &quot;Error in response data.&quot;,
    &quot;error-id&quot;: &quot;f1da45eb-95f6-4915-869e-033c2211ba47&quot;,
    &quot;error-code&quot;: &quot;1005&quot;,
    &quot;error-data&quot;: &quot;{\&quot;id\&quot;: [\&quot;Not a valid UUID.\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (f1da45eb-95f6-4915-869e-033c2211ba47) - ResponseValidationError &quot;Error in response data.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 283, in _dump_media
    content = encode_content(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 186, in encode_content
    content = _encode_known_mimetype(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 142, in _encode_known_mimetype
    raise error
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 140, in _encode_known_mimetype
    content = encoder(content)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 63, in __call__
    raise marshmallow.ValidationError(message=errors)
marshmallow.exceptions.ValidationError: {&apos;id&apos;: [&apos;Not a valid UUID.&apos;]}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 70, in wrapper
    resp._dump_media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 293, in _dump_media
    raise ResponseValidationError(
spantools.errors_api._classes.ResponseValidationError: Error in response data.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[False-DumpOptions.DUMP_AND_VALIDATE-data_send5-None-ResponseValidationError]" time="0.020"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;error-name&quot;: &quot;ResponseValidationError&quot;,
    &quot;error-message&quot;: &quot;Error in response data.&quot;,
    &quot;error-id&quot;: &quot;1c1fea80-105c-4f58-89cb-16d1a5af7c86&quot;,
    &quot;error-code&quot;: &quot;1005&quot;,
    &quot;error-data&quot;: &quot;{\&quot;last\&quot;: [\&quot;Malfoys are not allowed\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (1c1fea80-105c-4f58-89cb-16d1a5af7c86) - ResponseValidationError &quot;Error in response data.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 283, in _dump_media
    content = encode_content(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 186, in encode_content
    content = _encode_known_mimetype(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 142, in _encode_known_mimetype
    raise error
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 140, in _encode_known_mimetype
    content = encoder(content)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 63, in __call__
    raise marshmallow.ValidationError(message=errors)
marshmallow.exceptions.ValidationError: {&apos;last&apos;: [&apos;Malfoys are not allowed&apos;]}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 70, in wrapper
    resp._dump_media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 293, in _dump_media
    raise ResponseValidationError(
spantools.errors_api._classes.ResponseValidationError: Error in response data.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[False-DumpOptions.VALIDATE_ONLY-data_send6-data_returned6-None]" time="0.018"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;77&quot;
}

JSON:
{
    &quot;last&quot;: &quot;Potter&quot;,
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;,
    &quot;first&quot;: &quot;Harry&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[False-DumpOptions.VALIDATE_ONLY-data_send7-None-ResponseValidationError]" time="0.020"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;ResponseValidationError&quot;,
    &quot;error-message&quot;: &quot;Error in response data.&quot;,
    &quot;error-id&quot;: &quot;af6af0f1-c036-487c-a10b-7be588b16bbe&quot;,
    &quot;error-code&quot;: &quot;1005&quot;,
    &quot;error-data&quot;: &quot;{\&quot;last\&quot;: [\&quot;Malfoys are not allowed\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (af6af0f1-c036-487c-a10b-7be588b16bbe) - ResponseValidationError &quot;Error in response data.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 70, in wrapper
    resp._dump_media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 279, in _dump_media
    raise ResponseValidationError(
spantools.errors_api._classes.ResponseValidationError: Error in response data.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[False-DumpOptions.IGNORE-data_send8-data_returned8-None]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;77&quot;
}

JSON:
{
    &quot;last&quot;: &quot;Potter&quot;,
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;,
    &quot;first&quot;: &quot;Harry&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[False-DumpOptions.IGNORE-data_send9-data_returned9-None]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;46&quot;
}

JSON:
{
    &quot;last&quot;: &quot;Potter&quot;,
    &quot;id&quot;: &quot;badid&quot;,
    &quot;first&quot;: &quot;Harry&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[False-DumpOptions.IGNORE-data_send10-data_returned10-None]" time="0.018"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;77&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;,
    &quot;first&quot;: &quot;Draco&quot;,
    &quot;last&quot;: &quot;Malfoy&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[True-DumpOptions.DUMP_ONLY-data_send0-data_returned0-None]" time="0.046"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/bson&quot;,
    &quot;content-length&quot;: &quot;84&quot;
}

CONTENT:
b&apos;T\x00\x00\x00\x02last\x00\x07\x00\x00\x00Potter\x00\x02id\x00%\x00\x00\x00866a0b67-2e6c-48b1-ab47-52310657a246\x00\x02first\x00\x06\x00\x00\x00Harry\x00\x00&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[True-DumpOptions.DUMP_ONLY-data_send1-data_returned1-None]" time="0.020"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/bson&quot;,
    &quot;content-length&quot;: &quot;84&quot;
}

CONTENT:
b&apos;T\x00\x00\x00\x02last\x00\x07\x00\x00\x00Malfoy\x00\x02id\x00%\x00\x00\x00866a0b67-2e6c-48b1-ab47-52310657a246\x00\x02first\x00\x06\x00\x00\x00Draco\x00\x00&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[True-DumpOptions.DUMP_ONLY-data_send2-data_returned2-None]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/bson&quot;,
    &quot;content-length&quot;: &quot;53&quot;
}

CONTENT:
b&apos;5\x00\x00\x00\x02last\x00\x07\x00\x00\x00Potter\x00\x02id\x00\x06\x00\x00\x00badid\x00\x02first\x00\x06\x00\x00\x00Harry\x00\x00&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[True-DumpOptions.DUMP_AND_VALIDATE-data_send3-data_returned3-None]" time="0.034"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/bson&quot;,
    &quot;content-length&quot;: &quot;84&quot;
}

CONTENT:
b&apos;T\x00\x00\x00\x02last\x00\x07\x00\x00\x00Potter\x00\x02id\x00%\x00\x00\x00866a0b67-2e6c-48b1-ab47-52310657a246\x00\x02first\x00\x06\x00\x00\x00Harry\x00\x00&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[True-DumpOptions.DUMP_AND_VALIDATE-data_send4-None-ResponseValidationError]" time="0.022"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/bson&quot;,
    &quot;error-name&quot;: &quot;ResponseValidationError&quot;,
    &quot;error-message&quot;: &quot;Error in response data.&quot;,
    &quot;error-id&quot;: &quot;694e2af8-ee07-451f-bd64-f53f367d118c&quot;,
    &quot;error-code&quot;: &quot;1005&quot;,
    &quot;error-data&quot;: &quot;{\&quot;id\&quot;: [\&quot;Not a valid UUID.\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (694e2af8-ee07-451f-bd64-f53f367d118c) - ResponseValidationError &quot;Error in response data.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 283, in _dump_media
    content = encode_content(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 186, in encode_content
    content = _encode_known_mimetype(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 142, in _encode_known_mimetype
    raise error
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 140, in _encode_known_mimetype
    content = encoder(content)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 63, in __call__
    raise marshmallow.ValidationError(message=errors)
marshmallow.exceptions.ValidationError: {&apos;id&apos;: [&apos;Not a valid UUID.&apos;]}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 70, in wrapper
    resp._dump_media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 293, in _dump_media
    raise ResponseValidationError(
spantools.errors_api._classes.ResponseValidationError: Error in response data.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[True-DumpOptions.DUMP_AND_VALIDATE-data_send5-None-ResponseValidationError]" time="0.020"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/bson&quot;,
    &quot;error-name&quot;: &quot;ResponseValidationError&quot;,
    &quot;error-message&quot;: &quot;Error in response data.&quot;,
    &quot;error-id&quot;: &quot;38aa12ae-fc06-4deb-b3ad-f068bfc590eb&quot;,
    &quot;error-code&quot;: &quot;1005&quot;,
    &quot;error-data&quot;: &quot;{\&quot;last\&quot;: [\&quot;Malfoys are not allowed\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (38aa12ae-fc06-4deb-b3ad-f068bfc590eb) - ResponseValidationError &quot;Error in response data.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 283, in _dump_media
    content = encode_content(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 186, in encode_content
    content = _encode_known_mimetype(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 142, in _encode_known_mimetype
    raise error
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 140, in _encode_known_mimetype
    content = encoder(content)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 63, in __call__
    raise marshmallow.ValidationError(message=errors)
marshmallow.exceptions.ValidationError: {&apos;last&apos;: [&apos;Malfoys are not allowed&apos;]}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 70, in wrapper
    resp._dump_media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 293, in _dump_media
    raise ResponseValidationError(
spantools.errors_api._classes.ResponseValidationError: Error in response data.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[True-DumpOptions.VALIDATE_ONLY-data_send6-data_returned6-None]" time="0.021"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/bson&quot;,
    &quot;content-length&quot;: &quot;84&quot;
}

CONTENT:
b&apos;T\x00\x00\x00\x02last\x00\x07\x00\x00\x00Potter\x00\x02id\x00%\x00\x00\x00866a0b67-2e6c-48b1-ab47-52310657a246\x00\x02first\x00\x06\x00\x00\x00Harry\x00\x00&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[True-DumpOptions.VALIDATE_ONLY-data_send7-None-ResponseValidationError]" time="0.020"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/bson&quot;,
    &quot;error-name&quot;: &quot;ResponseValidationError&quot;,
    &quot;error-message&quot;: &quot;Error in response data.&quot;,
    &quot;error-id&quot;: &quot;59862780-8e90-4efe-961d-09fe62ca246d&quot;,
    &quot;error-code&quot;: &quot;1005&quot;,
    &quot;error-data&quot;: &quot;{\&quot;last\&quot;: [\&quot;Malfoys are not allowed\&quot;]}&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (59862780-8e90-4efe-961d-09fe62ca246d) - ResponseValidationError &quot;Error in response data.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 70, in wrapper
    resp._dump_media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 279, in _dump_media
    raise ResponseValidationError(
spantools.errors_api._classes.ResponseValidationError: Error in response data.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[True-DumpOptions.IGNORE-data_send8-data_returned8-None]" time="0.022"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/bson&quot;,
    &quot;content-length&quot;: &quot;84&quot;
}

CONTENT:
b&apos;T\x00\x00\x00\x02last\x00\x07\x00\x00\x00Potter\x00\x02id\x00%\x00\x00\x00866a0b67-2e6c-48b1-ab47-52310657a246\x00\x02first\x00\x06\x00\x00\x00Harry\x00\x00&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[True-DumpOptions.IGNORE-data_send9-data_returned9-None]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/bson&quot;,
    &quot;content-length&quot;: &quot;53&quot;
}

CONTENT:
b&apos;5\x00\x00\x00\x02last\x00\x07\x00\x00\x00Potter\x00\x02id\x00\x06\x00\x00\x00badid\x00\x02first\x00\x06\x00\x00\x00Harry\x00\x00&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="474" name="test_use_schema_resp[True-DumpOptions.IGNORE-data_send10-data_returned10-None]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/bson&quot;,
    &quot;content-length&quot;: &quot;84&quot;
}

CONTENT:
b&apos;T\x00\x00\x00\x02id\x00%\x00\x00\x00866a0b67-2e6c-48b1-ab47-52310657a246\x00\x02first\x00\x06\x00\x00\x00Draco\x00\x02last\x00\x07\x00\x00\x00Malfoy\x00\x00&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="553" name="test_resp_schema_class" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;77&quot;
}

JSON:
{
    &quot;last&quot;: &quot;Potter&quot;,
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;,
    &quot;first&quot;: &quot;Harry&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="565" name="test_resp_bson_raw[application/bson]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/bson&quot;,
    &quot;content-length&quot;: &quot;84&quot;
}

CONTENT:
b&apos;T\x00\x00\x00\x02last\x00\x07\x00\x00\x00Potter\x00\x02id\x00%\x00\x00\x00866a0b67-2e6c-48b1-ab47-52310657a246\x00\x02first\x00\x06\x00\x00\x00Harry\x00\x00&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="565" name="test_resp_bson_raw[application/json]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;77&quot;
}

JSON:
{
    &quot;last&quot;: &quot;Potter&quot;,
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;,
    &quot;first&quot;: &quot;Harry&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="582" name="test_resp_bson_encode_error" time="0.019"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/bson&quot;,
    &quot;error-name&quot;: &quot;ResponseValidationError&quot;,
    &quot;error-message&quot;: &quot;Error Encoding Response&quot;,
    &quot;error-id&quot;: &quot;9538d8f3-f87a-4054-909e-a934f0f3ad8d&quot;,
    &quot;error-code&quot;: &quot;1005&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (9538d8f3-f87a-4054-909e-a934f0f3ad8d) - ResponseValidationError &quot;Error Encoding Response&quot;
Traceback (most recent call last):
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 140, in _encode_known_mimetype
    content = encoder(content)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_encoders.py&quot;, line 154, in bson_encode
    return _bson_encode_single(data)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_encoders.py&quot;, line 138, in _bson_encode_single
    return bson.BSON.encode(data)
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/bson/__init__.py&quot;, line 1225, in encode
    return cls(encode(document, check_keys, codec_options))
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/bson/__init__.py&quot;, line 947, in encode
    return _dict_to_bson(document, check_keys, codec_options)
bson.errors.InvalidDocument: cannot encode object: Fraction(1, 4), of type: &lt;class &apos;fractions.Fraction&apos;&gt;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 283, in _dump_media
    content = encode_content(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 186, in encode_content
    content = _encode_known_mimetype(
  File &quot;/opt/hostedtoolcache/Python/3.8.1/x64/lib/python3.8/site-packages/spantools/_content_dump.py&quot;, line 144, in _encode_known_mimetype
    raise ContentEncodeError(&quot;Error while encoding content&quot;)
spantools._errors.ContentEncodeError: Error while encoding content

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 70, in wrapper
    resp._dump_media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 298, in _dump_media
    raise ResponseValidationError(&quot;Error Encoding Response&quot;)
spantools.errors_api._classes.ResponseValidationError: Error Encoding Response
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="595" name="test_resp_schema_class_marshmallow" time="0.018"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;77&quot;
}

JSON:
{
    &quot;last&quot;: &quot;Potter&quot;,
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;,
    &quot;first&quot;: &quot;Harry&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="614" name="test_use_schema_resp_text" time="0.017"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;text/plain&quot;,
    &quot;content-length&quot;: &quot;13&quot;
}

CONTENT:
b&apos;response_text&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestUseSchemaResp" file="zdevelop/tests/test_api.py" line="626" name="test_return_bson_types" time="0.026"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;136&quot;
}

JSON:
{
    &quot;id&quot;: &quot;8c22c8e4-cfa5-4fe4-8a0f-29489884af01&quot;,
    &quot;dt&quot;: &quot;2020-02-25T20:11:52&quot;,
    &quot;info&quot;: {
        &quot;key&quot;: &quot;value&quot;
    },
    &quot;array&quot;: [
        &quot;one&quot;,
        &quot;two&quot;,
        &quot;three&quot;
    ],
    &quot;empty&quot;: {}
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestProjection" file="zdevelop/tests/test_api.py" line="681" name="test_only" time="0.021"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestProjection" file="zdevelop/tests/test_api.py" line="696" name="test_exclude" time="0.020"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;33&quot;
}

JSON:
{
    &quot;first&quot;: &quot;Harry&quot;,
    &quot;last&quot;: &quot;Potter&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestProjection" file="zdevelop/tests/test_api.py" line="711" name="test_lru_cache_hits" time="0.118"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;45&quot;
}

JSON:
{
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestProjection" file="zdevelop/tests/test_api.py" line="755" name="test_handle_projection_false" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;77&quot;
}

JSON:
{
    &quot;last&quot;: &quot;Potter&quot;,
    &quot;id&quot;: &quot;866a0b67-2e6c-48b1-ab47-52310657a246&quot;,
    &quot;first&quot;: &quot;Harry&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestProjection" file="zdevelop/tests/test_api.py" line="773" name="test_original_only_kept" time="0.022"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;17&quot;
}

JSON:
{
    &quot;first&quot;: &quot;Harry&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestProjection" file="zdevelop/tests/test_api.py" line="788" name="test_original_exclude_kept" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;17&quot;
}

JSON:
{
    &quot;first&quot;: &quot;Harry&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestProjection" file="zdevelop/tests/test_api.py" line="803" name="test_client_cannot_override_exclude" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;2&quot;
}

JSON:
{}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestProjection" file="zdevelop/tests/test_api.py" line="818" name="test_client_cannot_override_only" time="0.018"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;2&quot;
}

JSON:
{}
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestProjection" file="zdevelop/tests/test_api.py" line="833" name="test_not_int_validation_error" time="0.019"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;project values must be &apos;1&apos; or &apos;0&apos;&quot;,
    &quot;error-id&quot;: &quot;c2158f2a-938a-4839-b478-1cc4ad469019&quot;,
    &quot;error-code&quot;: &quot;1003&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (c2158f2a-938a-4839-b478-1cc4ad469019) - RequestValidationError &quot;project values must be &apos;1&apos; or &apos;0&apos;&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 112, in projection
    self.projection[key] = int(value)
ValueError: invalid literal for int() with base 10: &apos;blah&apos;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 66, in wrapper
    resp._projection = req.projection
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 114, in projection
    raise RequestValidationError(
spantools.errors_api._classes.RequestValidationError: project values must be &apos;1&apos; or &apos;0&apos;
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestProjection" file="zdevelop/tests/test_api.py" line="844" name="test_wrong_int_validation_error" time="0.018"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;Project values must be &apos;0&apos; or &apos;1&apos;&quot;,
    &quot;error-id&quot;: &quot;5c2873d8-8994-4a80-b0d3-2a6071232e70&quot;,
    &quot;error-code&quot;: &quot;1003&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (5c2873d8-8994-4a80-b0d3-2a6071232e70) - RequestValidationError &quot;Project values must be &apos;0&apos; or &apos;1&apos;&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 70, in wrapper
    resp._dump_media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 274, in _dump_media
    content, schema, validate = self._resp_calculate_dump_settings()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 349, in _resp_calculate_dump_settings
    schema = self._projection_builder.build_projection_schema(projection_keys)
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 193, in build_projection_schema
    return self._build_projection_schema(project_keys, self.hash)
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 224, in _build_projection_schema
    raise RequestValidationError(&quot;Project values must be &apos;0&apos; or &apos;1&apos;&quot;)
spantools.errors_api._classes.RequestValidationError: Project values must be &apos;0&apos; or &apos;1&apos;
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestProjection" file="zdevelop/tests/test_api.py" line="855" name="test_not_supported_validation_error" time="0.017"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;End point does not support projection.&quot;,
    &quot;error-id&quot;: &quot;d11d82e3-a3da-4434-ba71-1523314399dc&quot;,
    &quot;error-code&quot;: &quot;1003&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (d11d82e3-a3da-4434-ba71-1523314399dc) - RequestValidationError &quot;End point does not support projection.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 70, in wrapper
    resp._dump_media()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 274, in _dump_media
    content, schema, validate = self._resp_calculate_dump_settings()
  File &quot;/home/vsts/work/1/s/spanserver/_req_resp.py&quot;, line 352, in _resp_calculate_dump_settings
    raise RequestValidationError(&quot;End point does not support projection.&quot;)
spantools.errors_api._classes.RequestValidationError: End point does not support projection.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestPaged" file="zdevelop/tests/test_api.py" line="867" name="test_paging_attrs" time="0.029"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;0&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-current-page&quot;: &quot;1&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-offset=2&amp;paging-limit=2&quot;
}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestPaged" file="zdevelop/tests/test_api.py" line="880" name="test_paging_req_error[req]" time="0.016"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestPaged" file="zdevelop/tests/test_api.py" line="880" name="test_paging_req_error[resp]" time="0.016"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestPaged" file="zdevelop/tests/test_api.py" line="899" name="test_get_paged_basic[url_params0]" time="0.049"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;0&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;1&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-offset=2&amp;paging-limit=2&quot;,
    &quot;paging-total-pages&quot;: &quot;5&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;27&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 0
    },
    {
        &quot;offset&quot;: 1
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;2&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;2&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-offset=0&amp;paging-limit=2&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-offset=4&amp;paging-limit=2&quot;,
    &quot;paging-total-pages&quot;: &quot;5&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;27&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 2
    },
    {
        &quot;offset&quot;: 3
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;4&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;3&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-offset=2&amp;paging-limit=2&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-offset=6&amp;paging-limit=2&quot;,
    &quot;paging-total-pages&quot;: &quot;5&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;27&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 4
    },
    {
        &quot;offset&quot;: 5
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;6&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;4&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-offset=4&amp;paging-limit=2&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-offset=8&amp;paging-limit=2&quot;,
    &quot;paging-total-pages&quot;: &quot;5&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;27&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 6
    },
    {
        &quot;offset&quot;: 7
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;8&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;5&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-offset=6&amp;paging-limit=2&quot;,
    &quot;paging-total-pages&quot;: &quot;5&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;27&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 8
    },
    {
        &quot;offset&quot;: 9
    }
]
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestPaged" file="zdevelop/tests/test_api.py" line="899" name="test_get_paged_basic[url_params1]" time="0.049"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;0&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;1&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-offset=2&amp;paging-limit=2&quot;,
    &quot;paging-total-pages&quot;: &quot;5&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;27&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 0
    },
    {
        &quot;offset&quot;: 1
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;2&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;2&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-offset=0&amp;paging-limit=2&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-offset=4&amp;paging-limit=2&quot;,
    &quot;paging-total-pages&quot;: &quot;5&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;27&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 2
    },
    {
        &quot;offset&quot;: 3
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;4&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;3&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-offset=2&amp;paging-limit=2&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-offset=6&amp;paging-limit=2&quot;,
    &quot;paging-total-pages&quot;: &quot;5&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;27&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 4
    },
    {
        &quot;offset&quot;: 5
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;6&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;4&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-offset=4&amp;paging-limit=2&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-offset=8&amp;paging-limit=2&quot;,
    &quot;paging-total-pages&quot;: &quot;5&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;27&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 6
    },
    {
        &quot;offset&quot;: 7
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;8&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;5&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-offset=6&amp;paging-limit=2&quot;,
    &quot;paging-total-pages&quot;: &quot;5&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;27&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 8
    },
    {
        &quot;offset&quot;: 9
    }
]
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestPaged" file="zdevelop/tests/test_api.py" line="960" name="test_get_paged_custom_limit" time="0.075"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;0&quot;,
    &quot;paging-limit&quot;: &quot;1&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;1&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=1&quot;,
    &quot;paging-total-pages&quot;: &quot;10&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;14&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 0
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;1&quot;,
    &quot;paging-limit&quot;: &quot;1&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;2&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=0&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=2&quot;,
    &quot;paging-total-pages&quot;: &quot;10&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;14&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 1
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;2&quot;,
    &quot;paging-limit&quot;: &quot;1&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;3&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=1&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=3&quot;,
    &quot;paging-total-pages&quot;: &quot;10&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;14&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 2
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;3&quot;,
    &quot;paging-limit&quot;: &quot;1&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;4&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=2&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=4&quot;,
    &quot;paging-total-pages&quot;: &quot;10&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;14&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 3
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;4&quot;,
    &quot;paging-limit&quot;: &quot;1&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;5&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=3&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=5&quot;,
    &quot;paging-total-pages&quot;: &quot;10&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;14&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 4
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;5&quot;,
    &quot;paging-limit&quot;: &quot;1&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;6&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=4&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=6&quot;,
    &quot;paging-total-pages&quot;: &quot;10&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;14&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 5
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;6&quot;,
    &quot;paging-limit&quot;: &quot;1&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;7&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=5&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=7&quot;,
    &quot;paging-total-pages&quot;: &quot;10&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;14&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 6
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;7&quot;,
    &quot;paging-limit&quot;: &quot;1&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;8&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=6&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=8&quot;,
    &quot;paging-total-pages&quot;: &quot;10&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;14&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 7
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;8&quot;,
    &quot;paging-limit&quot;: &quot;1&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;9&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=7&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=9&quot;,
    &quot;paging-total-pages&quot;: &quot;10&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;14&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 8
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;9&quot;,
    &quot;paging-limit&quot;: &quot;1&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;10&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-limit=1&amp;paging-offset=8&quot;,
    &quot;paging-total-pages&quot;: &quot;10&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;14&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 9
    }
]
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestPaged" file="zdevelop/tests/test_api.py" line="1015" name="test_get_paged_custom_offset" time="0.039"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;5&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;3&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-offset=3&amp;paging-limit=2&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-offset=7&amp;paging-limit=2&quot;,
    &quot;paging-total-pages&quot;: &quot;5&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;27&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 5
    },
    {
        &quot;offset&quot;: 6
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;7&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;4&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-offset=5&amp;paging-limit=2&quot;,
    &quot;paging-next&quot;: &quot;http://;/test?paging-offset=9&amp;paging-limit=2&quot;,
    &quot;paging-total-pages&quot;: &quot;5&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;27&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 7
    },
    {
        &quot;offset&quot;: 8
    }
]
RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-offset&quot;: &quot;9&quot;,
    &quot;paging-limit&quot;: &quot;2&quot;,
    &quot;paging-total-items&quot;: &quot;10&quot;,
    &quot;paging-current-page&quot;: &quot;5&quot;,
    &quot;paging-previous&quot;: &quot;http://;/test?paging-offset=7&amp;paging-limit=2&quot;,
    &quot;paging-total-pages&quot;: &quot;5&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;,
    &quot;content-length&quot;: &quot;28&quot;
}

JSON:
[
    {
        &quot;offset&quot;: 9
    },
    {
        &quot;offset&quot;: 10
    }
]
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestPaged" file="zdevelop/tests/test_api.py" line="1075" name="test_get_paged_limit_error" time="0.031"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;APILimitError&quot;,
    &quot;error-message&quot;: &quot;item limit for get http://;/test?paging-limit=3 is 2. 3 requested.&quot;,
    &quot;error-id&quot;: &quot;23721c75-05c5-412d-ba57-4641e873d848&quot;,
    &quot;error-code&quot;: &quot;1004&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (23721c75-05c5-412d-ba57-4641e873d848) - APILimitError &quot;item limit for get http://;/test?paging-limit=3 is 2. 3 requested.&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 68, in wrapper
    await endpoint_method(self, req, resp, *args, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 357, in wrapper
    paging_resp: PagingResp = _set_up_paging_resp(req, app_limit=limit)
  File &quot;/home/vsts/work/1/s/spanserver/_api.py&quot;, line 417, in _set_up_paging_resp
    raise APILimitError(
spantools.errors_api._classes.APILimitError: item limit for get http://;/test?paging-limit=3 is 2. 3 requested.
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestPaged" file="zdevelop/tests/test_api.py" line="1088" name="test_paged_from_headers" time="0.059"><system-out>PagingResp(offset=5, limit=2, total_items=None, current_page=3, previous=&apos;http://;/test?paging-offset=3&amp;paging-limit=2&apos;, next=&apos;http://;/test?paging-offset=7&amp;paging-limit=2&apos;, total_pages=None)
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestPaged" file="zdevelop/tests/test_api.py" line="1110" name="test_paged_from_headers_first" time="0.030"><system-out>PagingResp(offset=0, limit=2, total_items=None, current_page=1, previous=None, next=&apos;http://;/test?paging-offset=2&amp;paging-limit=2&apos;, total_pages=None)
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestPaged" file="zdevelop/tests/test_api.py" line="1132" name="test_paged_from_headers_last" time="0.030"><system-out>PagingResp(offset=9, limit=2, total_items=None, current_page=5, previous=&apos;http://;/test?paging-offset=7&amp;paging-limit=2&apos;, next=&apos;http://;/test?paging-offset=11&amp;paging-limit=2&apos;, total_pages=None)
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1156" name="test_load_int" time="0.018"></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1166" name="test_load_uuid" time="0.017"></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1179" name="test_load_uuid_validation_error" time="0.018"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;URL param item_id could not be cast to &lt;class &apos;uuid.UUID&apos;&gt;&quot;,
    &quot;error-id&quot;: &quot;cae8a5b9-32bc-4c6d-9ea1-50e36fda3e97&quot;,
    &quot;error-code&quot;: &quot;1003&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (cae8a5b9-32bc-4c6d-9ea1-50e36fda3e97) - RequestValidationError &quot;URL param item_id could not be cast to &lt;class &apos;uuid.UUID&apos;&gt;&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 62, in wrapper
    kwargs = _load_params(param_info, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 46, in _load_params
    kwargs[info.name] = info.load_param(kwargs[info.name])
  File &quot;/home/vsts/work/1/s/spanserver/_openapi.py&quot;, line 200, in load_param
    raise RequestValidationError(
spantools.errors_api._classes.RequestValidationError: URL param item_id could not be cast to &lt;class &apos;uuid.UUID&apos;&gt;
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1189" name="test_load_union[id_value0]" time="0.019"><system-out>e72e155f-dc38-4a1f-b491-b77d552bb28c
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1189" name="test_load_union[10]" time="0.018"><system-out>10
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1189" name="test_load_union[SomeIDName]" time="0.018"><system-out>SomeIDName
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1208" name="test_load_union_validation_error" time="0.018"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;RequestValidationError&quot;,
    &quot;error-message&quot;: &quot;URL param item_id could not be cast to &lt;class &apos;int&apos;&gt;&quot;,
    &quot;error-id&quot;: &quot;e96dfb14-d90b-4ded-a1f7-79f70845d641&quot;,
    &quot;error-code&quot;: &quot;1003&quot;
}

CONTENT:
b&apos;&apos;
</system-out><system-err>ERROR: (e96dfb14-d90b-4ded-a1f7-79f70845d641) - RequestValidationError &quot;URL param item_id could not be cast to &lt;class &apos;int&apos;&gt;&quot;
Traceback (most recent call last):
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 62, in wrapper
    kwargs = _load_params(param_info, **kwargs)
  File &quot;/home/vsts/work/1/s/spanserver/_method_wrapper.py&quot;, line 46, in _load_params
    kwargs[info.name] = info.load_param(kwargs[info.name])
  File &quot;/home/vsts/work/1/s/spanserver/_openapi.py&quot;, line 200, in load_param
    raise RequestValidationError(
spantools.errors_api._classes.RequestValidationError: URL param item_id could not be cast to &lt;class &apos;int&apos;&gt;
</system-err></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1220" name="test_load_bool[true-True]" time="0.018"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1220" name="test_load_bool[True-True]" time="0.018"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1220" name="test_load_bool[TRUE-True]" time="0.018"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1220" name="test_load_bool[1-True]" time="0.019"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1220" name="test_load_bool[false-False]" time="0.018"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1220" name="test_load_bool[False-False]" time="0.018"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1220" name="test_load_bool[FALSE-False]" time="0.018"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_api.TestLoadURLParams" file="zdevelop/tests/test_api.py" line="1220" name="test_load_bool[0-False]" time="0.018"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocDescriptions" file="zdevelop/tests/test_docstring_gen.py" line="129" name="test_concat" time="0.056"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      description: A thing.
      responses:
        &apos;201&apos;:
          description: Some Response.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocDescriptions" file="zdevelop/tests/test_docstring_gen.py" line="151" name="test_no_concat" time="0.007"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          description: OK.

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocDescriptions" file="zdevelop/tests/test_docstring_gen.py" line="172" name="test_implicit_summary" time="0.054"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      summary: A simple summary.

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocDescriptions" file="zdevelop/tests/test_docstring_gen.py" line="187" name="test_implicit_summary_and_description" time="0.058"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      description: Followed by some description.
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      summary: A simple summary.

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocDescriptions" file="zdevelop/tests/test_docstring_gen.py" line="204" name="test_implicit_200_ok" time="0.056"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocDescriptions" file="zdevelop/tests/test_docstring_gen.py" line="214" name="test_implicit_201_created" time="0.051"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;201&apos;:
          description: Created.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocDescriptions" file="zdevelop/tests/test_docstring_gen.py" line="228" name="test_auto_default_creation" time="0.052"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocDescriptions" file="zdevelop/tests/test_docstring_gen.py" line="239" name="test_implicit_401_error" time="0.051"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          description: Ok.
        &apos;401&apos;:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocDescriptions" file="zdevelop/tests/test_docstring_gen.py" line="253" name="test_description_through_doc" time="0.052"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          description: Some Description.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocDescriptions" file="zdevelop/tests/test_docstring_gen.py" line="270" name="test_docsting_bad_type" time="0.036"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocDescriptions" file="zdevelop/tests/test_docstring_gen.py" line="283" name="test_docsting_yaml_error" time="0.036"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocPathParams" file="zdevelop/tests/test_docstring_gen.py" line="294" name="test_str_param[str-string-None]" time="0.057"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route/{param}:
    get:
      parameters:
      - in: path
        name: param
        required: true
        schema:
          type: string
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocPathParams" file="zdevelop/tests/test_docstring_gen.py" line="294" name="test_str_param[bool-boolean-None]" time="0.060"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route/{param}:
    get:
      parameters:
      - in: path
        name: param
        required: true
        schema:
          type: boolean
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocPathParams" file="zdevelop/tests/test_docstring_gen.py" line="294" name="test_str_param[int-integer-None]" time="0.056"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route/{param}:
    get:
      parameters:
      - in: path
        name: param
        required: true
        schema:
          type: integer
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocPathParams" file="zdevelop/tests/test_docstring_gen.py" line="294" name="test_str_param[float-number-float]" time="0.059"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route/{param}:
    get:
      parameters:
      - in: path
        name: param
        required: true
        schema:
          format: float
          type: number
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocPathParams" file="zdevelop/tests/test_docstring_gen.py" line="294" name="test_str_param[date-string-date]" time="0.059"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route/{param}:
    get:
      parameters:
      - in: path
        name: param
        required: true
        schema:
          format: date
          type: string
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocPathParams" file="zdevelop/tests/test_docstring_gen.py" line="294" name="test_str_param[datetime-string-date-time]" time="0.062"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route/{param}:
    get:
      parameters:
      - in: path
        name: param
        required: true
        schema:
          format: date-time
          type: string
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocPathParams" file="zdevelop/tests/test_docstring_gen.py" line="294" name="test_str_param[UUID-string-uuid]" time="0.060"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route/{param}:
    get:
      parameters:
      - in: path
        name: param
        required: true
        schema:
          format: uuid
          type: string
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocPathParams" file="zdevelop/tests/test_docstring_gen.py" line="294" name="test_str_param[Fraction-string-fraction]" time="0.064"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route/{param}:
    get:
      parameters:
      - in: path
        name: param
        required: true
        schema:
          format: fraction
          type: string
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocCustomParams" file="zdevelop/tests/test_docstring_gen.py" line="335" name="test_doc_custom_header" time="0.061"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      parameters:
      - description: Some Custom Header.
        in: header
        name: custom-header
        required: false
        schema:
          default: 5.0
          format: float
          maximum: 10.0
          minimum: 1.0
          type: number
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocSchemas" file="zdevelop/tests/test_docstring_gen.py" line="374" name="test_req_schema" time="0.083"><system-out>components:
  schemas:
    NameGetReq1:
      properties:
        first:
          default: Harry
          type: string
        id:
          format: uuid
          type: string
        last:
          default: Potter
          type: string
        platform:
          default: 39/4
      type: object
info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: &apos;#/components/schemas/NameGetReq1&apos;
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - Names
tags:
- description: Name of a Wizard!
  name: Names

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocSchemas" file="zdevelop/tests/test_docstring_gen.py" line="394" name="test_req_schema_custom_name" time="0.069"><system-out>components:
  schemas:
    HumanName:
      properties:
        first:
          default: Harry
          type: string
        id:
          format: uuid
          type: string
        last:
          default: Potter
          type: string
        platform:
          default: 39/4
      type: object
info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: &apos;#/components/schemas/HumanName&apos;
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - Names
tags:
- description: Name of a Wizard!
  name: Names

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocSchemas" file="zdevelop/tests/test_docstring_gen.py" line="414" name="test_req_schema_double_name" time="0.131"><system-out>components:
  schemas:
    NameGetReq1:
      properties:
        first:
          default: Harry
          type: string
        id:
          format: uuid
          type: string
        last:
          default: Potter
          type: string
        platform:
          default: 39/4
      type: object
    NameGetReq2:
      properties:
        first:
          default: Harry
          type: string
        id:
          format: uuid
          type: string
        last:
          default: Potter
          type: string
        platform:
          default: 39/4
      type: object
info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: &apos;#/components/schemas/NameGetReq1&apos;
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - Names
  /route/second:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: &apos;#/components/schemas/NameGetReq2&apos;
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - Names
tags:
- description: Name of a Wizard!
  name: Names

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocSchemas" file="zdevelop/tests/test_docstring_gen.py" line="449" name="test_resp_schema" time="0.068"><system-out>components:
  schemas:
    NameGetResp1:
      properties:
        first:
          default: Harry
          type: string
        id:
          format: uuid
          type: string
        last:
          default: Potter
          type: string
        platform:
          default: 39/4
      type: object
info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          content:
            application/json:
              schema:
                $ref: &apos;#/components/schemas/NameGetResp1&apos;
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - Names
tags:
- description: Name of a Wizard!
  name: Names

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocSchemas" file="zdevelop/tests/test_docstring_gen.py" line="469" name="test_resp_schema_custom_name" time="0.067"><system-out>components:
  schemas:
    HumanName:
      properties:
        first:
          default: Harry
          type: string
        id:
          format: uuid
          type: string
        last:
          default: Potter
          type: string
        platform:
          default: 39/4
      type: object
info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          content:
            application/json:
              schema:
                $ref: &apos;#/components/schemas/HumanName&apos;
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - Names
tags:
- description: Name of a Wizard!
  name: Names

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocSchemas" file="zdevelop/tests/test_docstring_gen.py" line="489" name="test_req_resp_schema_custom_name" time="0.081"><system-out>components:
  schemas:
    NameGetReq1:
      properties:
        first:
          default: Harry
          type: string
        id:
          format: uuid
          type: string
        last:
          default: Potter
          type: string
        platform:
          default: 39/4
      type: object
    NameGetResp1:
      properties:
        first:
          default: Harry
          type: string
        id:
          format: uuid
          type: string
        last:
          default: Potter
          type: string
        platform:
          default: 39/4
      type: object
info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: &apos;#/components/schemas/NameGetReq1&apos;
      responses:
        &apos;200&apos;:
          content:
            application/json:
              schema:
                $ref: &apos;#/components/schemas/NameGetResp1&apos;
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - Names
tags:
- description: Name of a Wizard!
  name: Names

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocSchemas" file="zdevelop/tests/test_docstring_gen.py" line="515" name="test_req_mimetype" time="0.060"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocSchemas" file="zdevelop/tests/test_docstring_gen.py" line="529" name="test_resp_mimetype" time="0.065"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          content:
            text/plain:
              schema:
                type: string
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocSchemas" file="zdevelop/tests/test_docstring_gen.py" line="543" name="test_schema_description_multiline" time="0.068"><system-out>components:
  schemas:
    SomeGetReq1:
      properties: {}
      type: object
info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: &apos;#/components/schemas/SomeGetReq1&apos;
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - Somes
tags:
- description: &apos;This is quite a long description, we want to make sure that it is
    de-dented

    and the extra newlines are removed, as that causes formatting issues with

    some documentation tools.&apos;
  name: Somes

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocSchemas" file="zdevelop/tests/test_docstring_gen.py" line="572" name="test_schema_tag_complex_plural[nameSchema-names]" time="0.064"><system-out>components:
  schemas:
    nameGetReq1:
      properties: {}
      type: object
info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: &apos;#/components/schemas/nameGetReq1&apos;
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - names
tags:
- description: Some description.
  name: names

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocSchemas" file="zdevelop/tests/test_docstring_gen.py" line="572" name="test_schema_tag_complex_plural[SomeStorySchema-SomeStories]" time="0.068"><system-out>components:
  schemas:
    SomeStoryGetReq1:
      properties: {}
      type: object
info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: &apos;#/components/schemas/SomeStoryGetReq1&apos;
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - SomeStories
tags:
- description: Some description.
  name: SomeStories

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocSchemas" file="zdevelop/tests/test_docstring_gen.py" line="572" name="test_schema_tag_complex_plural[ScanSeriesSchema-ScanSeries]" time="0.065"><system-out>components:
  schemas:
    ScanSeriesGetReq1:
      properties: {}
      type: object
info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: &apos;#/components/schemas/ScanSeriesGetReq1&apos;
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - ScanSeries
tags:
- description: Some description.
  name: ScanSeries

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocSchemas" file="zdevelop/tests/test_docstring_gen.py" line="572" name="test_schema_tag_complex_plural[ScanSeriesschema-ScanSeries]" time="0.064"><system-out>components:
  schemas:
    ScanSeriesschemaGetReq1:
      properties: {}
      type: object
info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: &apos;#/components/schemas/ScanSeriesschemaGetReq1&apos;
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - ScanSeries
tags:
- description: Some description.
  name: ScanSeries

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocExamples" file="zdevelop/tests/test_docstring_gen.py" line="607" name="test_req_example" time="0.079"><system-out>components:
  schemas:
    NameGetReq1:
      properties:
        first:
          default: Harry
          type: string
        id:
          format: uuid
          type: string
        last:
          default: Potter
          type: string
        platform:
          default: 39/4
      type: object
info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      requestBody:
        content:
          application/json:
            example:
              first: Harry
              id: 5a0f579e-a01a-4b5a-9649-13e3270ebcb3
              last: Potter
              platform: 39/4
            schema:
              $ref: &apos;#/components/schemas/NameGetReq1&apos;
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - Names
tags:
- description: Name of a Wizard!
  name: Names

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocExamples" file="zdevelop/tests/test_docstring_gen.py" line="626" name="test_req_example_text" time="0.068"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      requestBody:
        content:
          text/plain:
            example: Harry Potter
            schema:
              type: string
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocExamples" file="zdevelop/tests/test_docstring_gen.py" line="645" name="test_resp_example" time="0.073"><system-out>components:
  schemas:
    NameGetResp1:
      properties:
        first:
          default: Harry
          type: string
        id:
          format: uuid
          type: string
        last:
          default: Potter
          type: string
        platform:
          default: 39/4
      type: object
info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          content:
            application/json:
              example:
                first: Harry
                id: 7741745b-31d3-4d37-8d7e-bfc0f870c717
                last: Potter
                platform: 39/4
              schema:
                $ref: &apos;#/components/schemas/NameGetResp1&apos;
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string
      tags:
      - Names
tags:
- description: Name of a Wizard!
  name: Names

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocExamples" file="zdevelop/tests/test_docstring_gen.py" line="664" name="test_resp_example_text" time="0.058"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        &apos;200&apos;:
          content:
            text/plain:
              example: Harry Potter
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestErrorHeaders" file="zdevelop/tests/test_docstring_gen.py" line="685" name="test_doc_error_headers" time="0.051"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          description: Ok.
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestErrorHeaders" file="zdevelop/tests/test_docstring_gen.py" line="716" name="test_doc_error_headers_401" time="0.052"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      responses:
        &apos;200&apos;:
          description: Ok.
        &apos;401&apos;:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocPagedHeaders" file="zdevelop/tests/test_docstring_gen.py" line="752" name="test_doc_paged_params" time="0.113"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      parameters:
      - description: Index of first item to be returned in response body.
        in: query
        name: paging-offset
        required: false
        schema:
          default: 10
          type: integer
      - description: Maximum number of items allowed in response body.
        in: query
        name: paging-limit
        required: false
        schema:
          maximum: 200
          type: integer
      responses:
        &apos;200&apos;:
          description: Ok.
          headers:
            paging-current-page:
              description: Page number of item set in response body given current
                limit-per-page.
              required: true
              schema:
                type: integer
            paging-limit:
              description: Maximum number of items allowed in response body.
              required: true
              schema:
                maximum: 200
                type: integer
            paging-next:
              description: URL to next page.
              required: true
              schema:
                type: string
            paging-offset:
              description: Index of first item returned in response body.
              required: true
              schema:
                default: 10
                type: integer
            paging-previous:
              description: URL to previous page.
              required: true
              schema:
                type: string
            paging-total-items:
              description: Total number of items that match request.
              required: true
              schema:
                type: integer
            paging-total-pages:
              description: Total number of pages that match request given current
                limit-per-page.
              required: true
              schema:
                type: integer
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocPagedHeaders" file="zdevelop/tests/test_docstring_gen.py" line="790" name="test_paged_not_in_error_default" time="0.115"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      parameters:
      - description: Index of first item to be returned in response body.
        in: query
        name: paging-offset
        required: false
        schema:
          default: 10
          type: integer
      - description: Maximum number of items allowed in response body.
        in: query
        name: paging-limit
        required: false
        schema:
          maximum: 200
          type: integer
      responses:
        &apos;200&apos;:
          description: Ok.
          headers:
            paging-current-page:
              description: Page number of item set in response body given current
                limit-per-page.
              required: true
              schema:
                type: integer
            paging-limit:
              description: Maximum number of items allowed in response body.
              required: true
              schema:
                maximum: 200
                type: integer
            paging-next:
              description: URL to next page.
              required: true
              schema:
                type: string
            paging-offset:
              description: Index of first item returned in response body.
              required: true
              schema:
                default: 10
                type: integer
            paging-previous:
              description: URL to previous page.
              required: true
              schema:
                type: string
            paging-total-items:
              description: Total number of items that match request.
              required: true
              schema:
                type: integer
            paging-total-pages:
              description: Total number of pages that match request given current
                limit-per-page.
              required: true
              schema:
                type: integer
        default:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestDocPagedHeaders" file="zdevelop/tests/test_docstring_gen.py" line="807" name="test_paged_not_in_error" time="0.115"><system-out>info:
  description: An API for Testing Things
  title: TestAPI
  version: 1.0.0
openapi: 3.0.0
paths:
  /route:
    get:
      parameters:
      - description: Index of first item to be returned in response body.
        in: query
        name: paging-offset
        required: false
        schema:
          default: 10
          type: integer
      - description: Maximum number of items allowed in response body.
        in: query
        name: paging-limit
        required: false
        schema:
          maximum: 200
          type: integer
      responses:
        &apos;200&apos;:
          description: Ok.
          headers:
            paging-current-page:
              description: Page number of item set in response body given current
                limit-per-page.
              required: true
              schema:
                type: integer
            paging-limit:
              description: Maximum number of items allowed in response body.
              required: true
              schema:
                maximum: 200
                type: integer
            paging-next:
              description: URL to next page.
              required: true
              schema:
                type: string
            paging-offset:
              description: Index of first item returned in response body.
              required: true
              schema:
                default: 10
                type: integer
            paging-previous:
              description: URL to previous page.
              required: true
              schema:
                type: string
            paging-total-items:
              description: Total number of items that match request.
              required: true
              schema:
                type: integer
            paging-total-pages:
              description: Total number of pages that match request given current
                limit-per-page.
              required: true
              schema:
                type: integer
        &apos;401&apos;:
          description: Error.
          headers:
            error-code:
              description: An API error code that identifies the error-type.
              required: true
              schema:
                default: 1000
                type: integer
            error-data:
              description: &apos;JSON-serialized data about the error. For instance: request
                body validation errors will return a dict with details about all offending
                fields.&apos;
              required: false
              schema:
                format: dict
                type: string
            error-id:
              description: A unique ID with details about this error. Please reference
                when reporting errors.
              required: false
              schema:
                format: uuid
                type: string
            error-message:
              description: Message containing information about the error.
              required: true
              schema:
                default: An unknown error has occurred.
                type: string
            error-name:
              description: Human-readable error name.
              required: true
              schema:
                default: APIError
                type: string

</system-out></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestSaveFiles" file="zdevelop/tests/test_docstring_gen.py" line="829" name="test_openapi_spec_save" time="0.037"></testcase><testcase classname="zdevelop.tests.test_docstring_gen.TestSaveFiles" file="zdevelop/tests/test_docstring_gen.py" line="839" name="test_redoc_save" time="19.789"><system-out>Prerendering docs

🎉 bundled successfully in: zdevelop/tests/redoc.html (915 KiB) [⏱ 0.144s]
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="27" name="test_basic_response" time="0.001"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="33" name="test_basic_response_custom_status" time="0.002"><system-out>RESPONSE: &lt;Response [201]&gt;

HEADERS:
{}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="39" name="test_basic_response_custom_status_tuple" time="0.001"><system-out>RESPONSE: &lt;Response [201]&gt;

HEADERS:
{}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="45" name="test_basic_response_status_raises" time="0.001"><system-out>RESPONSE: &lt;Response [201]&gt;

HEADERS:
{}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="52" name="test_basic_response_status_raises_tuple" time="0.001"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="59" name="test_validate_text" time="0.002"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;test text&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="66" name="test_validate_text_raises" time="0.002"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;test text bad&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="74" name="test_validate_text_not_text" time="0.001"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="82" name="test_validate_headers" time="0.001"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;fake&quot;: &quot;header&quot;
}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="89" name="test_validate_headers_missing" time="0.001"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;fake&quot;: &quot;header&quot;
}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="97" name="test_validate_headers_wrong" time="0.001"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;fake&quot;: &quot;header&quot;
}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="105" name="test_validate_data_schema" time="0.002"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

JSON:
{
    &quot;first&quot;: &quot;Harry&quot;,
    &quot;last&quot;: &quot;Potter&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="113" name="test_data_schema_bson" time="0.002"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;Content-Type&quot;: &quot;application/bson&quot;
}

CONTENT:
b&quot;&apos;\x00\x00\x00\x02first\x00\x06\x00\x00\x00Harry\x00\x02last\x00\x07\x00\x00\x00Potter\x00\x00&quot;
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="122" name="test_data_schema_bson_many" time="0.002"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;Content-Type&quot;: &quot;application/bson&quot;
}

CONTENT:
b&quot;\xe2\x90\x9e&apos;\x00\x00\x00\x02first\x00\x06\x00\x00\x00Harry\x00\x02last\x00\x07\x00\x00\x00Potter\x00\x00\xe2\x90\x9e+\x00\x00\x00\x02first\x00\t\x00\x00\x00Hermione\x00\x02last\x00\x08\x00\x00\x00Granger\x00\x00&quot;
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="140" name="test_data_schema_bson_many_single" time="0.002"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;Content-Type&quot;: &quot;application/bson&quot;
}

CONTENT:
b&quot;\xe2\x90\x9e&apos;\x00\x00\x00\x02first\x00\x06\x00\x00\x00Harry\x00\x02last\x00\x07\x00\x00\x00Potter\x00\x00&quot;
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="152" name="test_validate_data_load_error" time="0.002"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
b&apos;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&apos;
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="160" name="test_validate_data_validation_error" time="0.002"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

JSON:
{
    &quot;first&quot;: &quot;Harry&quot;
}
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="168" name="test_validate_paging" time="0.001"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-next&quot;: &quot;www.url.com/next&quot;,
    &quot;paging-previous&quot;: &quot;www.url.com/previous&quot;,
    &quot;paging-offset&quot;: 5,
    &quot;paging-limit&quot;: 5,
    &quot;paging-current-page&quot;: 2,
    &quot;paging-total-pages&quot;: 10,
    &quot;paging-total-items&quot;: 50
}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="193" name="test_validate_paging_raises" time="0.001"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-next&quot;: &quot;www.url.com/next&quot;,
    &quot;paging-previous&quot;: &quot;www.url.com/previous&quot;,
    &quot;paging-offset&quot;: 5,
    &quot;paging-limit&quot;: 5,
    &quot;paging-current-page&quot;: 2,
    &quot;paging-total-pages&quot;: 10,
    &quot;paging-total-items&quot;: 50
}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="219" name="test_validate_paging_no_urls" time="0.001"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-next&quot;: &quot;www.url.com/next&quot;,
    &quot;paging-previous&quot;: &quot;www.url.com/previous&quot;,
    &quot;paging-offset&quot;: 5,
    &quot;paging-limit&quot;: 5,
    &quot;paging-current-page&quot;: 2,
    &quot;paging-total-pages&quot;: 10,
    &quot;paging-total-items&quot;: 50
}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateResponse" file="zdevelop/tests/test_test_utils.py" line="246" name="test_validate_paging_no_urls_raises" time="0.001"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;paging-next&quot;: &quot;www.url.com/next&quot;,
    &quot;paging-previous&quot;: &quot;www.url.com/previous&quot;,
    &quot;paging-offset&quot;: 5,
    &quot;paging-limit&quot;: 5,
    &quot;paging-current-page&quot;: 2,
    &quot;paging-total-pages&quot;: 10,
    &quot;paging-total-items&quot;: 50
}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateError" file="zdevelop/tests/test_test_utils.py" line="274" name="test_validate_error" time="0.001"><system-out>RESPONSE: &lt;Response [400]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;NothingToReturnError&quot;,
    &quot;error-code&quot;: 1002,
    &quot;error-message&quot;: &quot;some message&quot;,
    &quot;error-id&quot;: &quot;9ecc33d7-b9b3-4087-8384-728f17a61368&quot;
}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateError" file="zdevelop/tests/test_test_utils.py" line="286" name="test_status_mismatch" time="0.001"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;NothingToReturnError&quot;,
    &quot;error-code&quot;: 1002,
    &quot;error-message&quot;: &quot;some message&quot;,
    &quot;error-id&quot;: &quot;535b2d6e-def5-4fac-9269-daba731c4f6b&quot;
}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateError" file="zdevelop/tests/test_test_utils.py" line="299" name="test_validate_error_wrong_error" time="0.001"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{
    &quot;error-name&quot;: &quot;NothingToReturnError&quot;,
    &quot;error-code&quot;: 1002,
    &quot;error-message&quot;: &quot;some message&quot;,
    &quot;error-id&quot;: &quot;e7142101-fd5b-4471-87ce-49866cf2b368&quot;
}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateError" file="zdevelop/tests/test_test_utils.py" line="312" name="test_validate_error_no_error" time="0.001"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestValidateError" file="zdevelop/tests/test_test_utils.py" line="320" name="test_validate_error_no_error_no_headers" time="0.001"><system-out>RESPONSE: &lt;Response [200]&gt;

HEADERS:
{}

CONTENT:
None
</system-out></testcase><testcase classname="zdevelop.tests.test_test_utils.TestPrintedInfo" file="zdevelop/tests/test_test_utils.py" line="329" name="test_basic" time="0.002"></testcase><testcase classname="zdevelop.tests.test_test_utils.TestPrintedInfo" file="zdevelop/tests/test_test_utils.py" line="339" name="test_text" time="0.002"></testcase><testcase classname="zdevelop.tests.test_test_utils.TestPrintedInfo" file="zdevelop/tests/test_test_utils.py" line="351" name="test_body" time="0.002"></testcase><testcase classname="zdevelop.tests.test_test_utils.TestPrintedInfo" file="zdevelop/tests/test_test_utils.py" line="363" name="test_body_not_json" time="0.002"></testcase></testsuite></testsuites>